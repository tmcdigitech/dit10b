<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>10 Digital Tech on TMC - 10 Digital Tech Semester 1</title><link>https://tmcdigitech.github.io/dit10a/</link><description>Recent content in 10 Digital Tech on TMC - 10 Digital Tech Semester 1</description><generator>Hugo -- gohugo.io</generator><language>en-au</language><atom:link href="https://tmcdigitech.github.io/dit10a/index.xml" rel="self" type="application/rss+xml"/><item><title>Hello, World!</title><link>https://tmcdigitech.github.io/dit10a/bottleBasics/01helloWorld/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit10a/bottleBasics/01helloWorld/</guid><description>Make a new file named hello.py and enter the following code: 1 2 3 4 5 6 7 from bottle import route, run @route(&amp;#39;/&amp;#39;) def index(): return &amp;#34;Hello, world!&amp;#34; run(reloader=True, debug=True) To run your file, you should be able to press the play button in the top right of the window. Failing that, from the file explorer on the left, right click on your file and choose Open in Integrated Terminal.</description></item><item><title>Sequence</title><link>https://tmcdigitech.github.io/dit10a/checkpoint1/sequence/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit10a/checkpoint1/sequence/</guid><description>from The Computing Zone
1. Three in, three out Write a program that will allow a user to enter their name (string), their age (integer) and their favourite TV program (string). The program will then display the information entered and some additional text on separate lines. An example of the input and output from the program is shown below. What is your name? &amp;gt; Lister What is your age? &amp;gt; 39 What is your favourite TV program?</description></item><item><title>More routes</title><link>https://tmcdigitech.github.io/dit10a/bottleBasics/02moreRoutes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit10a/bottleBasics/02moreRoutes/</guid><description> main.py from bottle import route, run @route(&amp;#39;/&amp;#39;) def index(): return &amp;#34;&amp;#34;&amp;#34; &amp;lt;h1&amp;gt;Hello, world!&amp;lt;/h1&amp;gt; Go to &amp;lt;a href=&amp;#34;/other&amp;#34;&amp;gt;the other page&amp;lt;/a&amp;gt;. &amp;#34;&amp;#34;&amp;#34; @route(&amp;#39;/other&amp;#39;) def other_page(): return &amp;#34;&amp;#34;&amp;#34; &amp;lt;h1&amp;gt;The other page&amp;lt;/h1&amp;gt; Go back to &amp;lt;a href=&amp;#34;/&amp;#34;&amp;gt;the home page&amp;lt;/a&amp;gt;. &amp;#34;&amp;#34;&amp;#34; run(reloader=True, debug=True)</description></item><item><title>Selection</title><link>https://tmcdigitech.github.io/dit10a/checkpoint1/selection/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit10a/checkpoint1/selection/</guid><description>from The Computing Zone
9. Advice please Write a program that asks the user if they would like some advice. If they enter Y, provide them with an amusing message. Would you like some advice? &amp;gt; Y Always know where your towel is. Would you like some advice? &amp;gt; N 10. Darts During a game of darts, the highest score that can be achieved in a single turn is 180. The lowest is 0.</description></item><item><title>Iteration</title><link>https://tmcdigitech.github.io/dit10a/checkpoint1/iteration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit10a/checkpoint1/iteration/</guid><description>from The Computing Zone
13. Lines cheat A naughty pupil has been given lines to copy as a punishment from their Computing teacher. The have been asked to type out “I must not behave like muppet in class” 20 times. Write a program that asks a pupil to enter a sentence. The same sentence should then be displayed 20 times. What sentence would you like copied? &amp;gt; I must not behave like a muppet in class.</description></item><item><title>HTML pages</title><link>https://tmcdigitech.github.io/dit10a/bottleBasics/04fullHtmlExample/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit10a/bottleBasics/04fullHtmlExample/</guid><description>This example returns a complete HTML page.
base.html &amp;lt;!doctype html&amp;gt; &amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;!-- Required meta tags --&amp;gt; &amp;lt;meta charset=&amp;#34;utf-8&amp;#34;&amp;gt; &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, initial-scale=1&amp;#34;&amp;gt; &amp;lt;!-- Bootstrap CSS --&amp;gt; &amp;lt;link href=&amp;#34;https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css&amp;#34; rel=&amp;#34;stylesheet&amp;#34; integrity=&amp;#34;sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3&amp;#34; crossorigin=&amp;#34;anonymous&amp;#34;&amp;gt; &amp;lt;title&amp;gt;Hello, world!&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;h1&amp;gt;Hello, world!&amp;lt;/h1&amp;gt; &amp;lt;!-- Bootstrap Bundle with Popper --&amp;gt; &amp;lt;script src=&amp;#34;https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js&amp;#34; integrity=&amp;#34;sha384-ka7Sk0Gln4gmtz2MlQnikT1wXgYsOg+OMhuP+IlRH9sENBO0LRn5q+8nbTov4+1p&amp;#34; crossorigin=&amp;#34;anonymous&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt;</description></item><item><title>Databases</title><link>https://tmcdigitech.github.io/dit10a/bottleBasics/05dbExample/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit10a/bottleBasics/05dbExample/</guid><description>from BottlePy.org
See also this funprojects.blog tutorial.
main.py import sqlite3 from bottle import route, run, debug, template, request, static_file, error @route(&amp;#39;/todo&amp;#39;) def todo_list(): conn = sqlite3.connect(&amp;#39;todo.db&amp;#39;) c = conn.cursor() c.execute(&amp;#34;SELECT id, task FROM todo WHERE status LIKE &amp;#39;1&amp;#39;&amp;#34;) result = c.fetchall() c.close() output = template(&amp;#39;tpl/make_table.html&amp;#39;, rows=result) return output @route(&amp;#39;/new&amp;#39;, method=&amp;#39;GET&amp;#39;) def new_item(): if request.GET.save: new = request.GET.task.strip() conn = sqlite3.connect(&amp;#39;todo.db&amp;#39;) c = conn.cursor() c.execute(&amp;#34;INSERT INTO todo (task,status) VALUES (?,?)&amp;#34;, (new, 1)) new_id = c.</description></item><item><title>Complete project</title><link>https://tmcdigitech.github.io/dit10a/bottleBasics/06kitchenSink/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit10a/bottleBasics/06kitchenSink/</guid><description>main.py import sqlite3 from bottle import route, run, debug, template, request, static_file, error, redirect, abort # only needed when you run Bottle on mod_wsgi # from bottle import default_app @route(&amp;#39;/&amp;#39;) @route(&amp;#39;/todo&amp;#39;) def todo_list(): conn = sqlite3.connect(&amp;#39;todo.db&amp;#39;) c = conn.cursor() c.execute(&amp;#34;SELECT id, task FROM todo WHERE status LIKE &amp;#39;1&amp;#39;&amp;#34;) result_ongoing = c.fetchall() c.execute(&amp;#34;SELECT id, task FROM todo WHERE status LIKE &amp;#39;0&amp;#39;&amp;#34;) result_finished = c.fetchall() c.close() output = template(&amp;#39;tpl/make_table.html&amp;#39;, ongoing=result_ongoing, finished=result_finished) return output @route(&amp;#39;/new&amp;#39;, method=&amp;#39;GET&amp;#39;) def new_item_form(): return template(&amp;#39;tpl/new_task.</description></item><item><title>Task 2 - Site Design</title><link>https://tmcdigitech.github.io/dit10a/siteDesign/planning/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit10a/siteDesign/planning/</guid><description>Your task is to design a simple dynamic website using Bottle, with a SQLite database to handle data.
Use this template to manage your planning for this task.</description></item><item><title>bottle.run()</title><link>https://tmcdigitech.github.io/dit10a/glossary/bottleRun/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit10a/glossary/bottleRun/</guid><description>run(reloader=True, debug=True) You can just say run(), and it will begin using a set of defaults, but we have customised the server slightly. The reloader flag tells the server to restart every time we change a code file, which saves us from turning it off and on again every time we modify our code. Very handy for development! The debug flag does a something thing for templates.
There are a lot of other flags you can use, but two that you might find handy are:</description></item><item><title>Strings</title><link>https://tmcdigitech.github.io/dit10a/reference/strings/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit10a/reference/strings/</guid><description>adapted from Medium.com
Let us see the different operations that can be performed on the below string.
word = &amp;#39;Sample&amp;#39; len(word) # 6 +---+---+---+---+---+---+ | S | a | m | p | l | e | +---+---+---+---+---+---+ 0 1 2 3 4 5 6 -6 -5 -4 -3 -2 -1 1 Concatenation Join a string with another string
word = &amp;#39;Sample&amp;#39; word + &amp;#39; &amp;#39; + &amp;#39;trick&amp;#39; # &amp;#39;Sample trick&amp;#39; 2 Indexed Access of Strings A string in a python can be indexed to perform operations on the string.</description></item><item><title>URLs</title><link>https://tmcdigitech.github.io/dit10a/glossary/URLs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit10a/glossary/URLs/</guid><description>\[\overbrace{\text{https}}^{\text{scheme}}\text{://} \overbrace{\text{tmcdigitech.github.io}}^{\text{address}} \text{:}\overbrace{\text{8080}}^{\text{port}} \overbrace{\text{/dit10a/glossary/URLs/}}^{\text{path/endpoint}}\] The scheme tells the browser how it will connect to the server. This is typically https, but could also be http, ftp, mailto, or any number of others.
The address tells the browser where to send the request, i.e. which address. Addresses can be in the form of domain names like google.com, or IP addresses like 192.168.0.1.
google.com is like saying Thomas More College. 192.168.0.1 is like saying 35 Amsterdam Crescent, Salisbury Downs.</description></item><item><title>VS Code makeover</title><link>https://tmcdigitech.github.io/dit10a/resources/vscMakeover/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit10a/resources/vscMakeover/</guid><description>Visual Studio Code is a fabulous and flexible editor. Here are some things I&amp;rsquo;ve added, which you might like too.
Editing settings.json When you go to File &amp;gt; Preferences &amp;gt; Settings, all the options you see are stored in a file called settings.json. Enabling or changing some options requires editing the file directly. In this case, you can scroll down the settings page until you find a link called Edit in settings.</description></item></channel></rss>